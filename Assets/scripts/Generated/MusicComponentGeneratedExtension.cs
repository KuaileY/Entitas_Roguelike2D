//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {
    public partial class Entity {
        public MusicComponent music { get { return (MusicComponent)GetComponent(InputComponentIds.Music); } }

        public bool hasMusic { get { return HasComponent(InputComponentIds.Music); } }

        public Entity AddMusic(Res.audios newClip) {
            var component = CreateComponent<MusicComponent>(InputComponentIds.Music);
            component.clip = newClip;
            return AddComponent(InputComponentIds.Music, component);
        }

        public Entity ReplaceMusic(Res.audios newClip) {
            var component = CreateComponent<MusicComponent>(InputComponentIds.Music);
            component.clip = newClip;
            ReplaceComponent(InputComponentIds.Music, component);
            return this;
        }

        public Entity RemoveMusic() {
            return RemoveComponent(InputComponentIds.Music);
        }
    }

    public partial class Pool {
        public Entity musicEntity { get { return GetGroup(InputMatcher.Music).GetSingleEntity(); } }

        public MusicComponent music { get { return musicEntity.music; } }

        public bool hasMusic { get { return musicEntity != null; } }

        public Entity SetMusic(Res.audios newClip) {
            if (hasMusic) {
                throw new EntitasException("Could not set music!\n" + this + " already has an entity with MusicComponent!",
                    "You should check if the pool already has a musicEntity before setting it or use pool.ReplaceMusic().");
            }
            var entity = CreateEntity();
            entity.AddMusic(newClip);
            return entity;
        }

        public Entity ReplaceMusic(Res.audios newClip) {
            var entity = musicEntity;
            if (entity == null) {
                entity = SetMusic(newClip);
            } else {
                entity.ReplaceMusic(newClip);
            }

            return entity;
        }

        public void RemoveMusic() {
            DestroyEntity(musicEntity);
        }
    }
}

    public partial class InputMatcher {
        static IMatcher _matcherMusic;

        public static IMatcher Music {
            get {
                if (_matcherMusic == null) {
                    var matcher = (Matcher)Matcher.AllOf(InputComponentIds.Music);
                    matcher.componentNames = InputComponentIds.componentNames;
                    _matcherMusic = matcher;
                }

                return _matcherMusic;
            }
        }
    }
