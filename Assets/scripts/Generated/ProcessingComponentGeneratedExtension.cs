//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {
    public partial class Entity {
        static readonly ProcessingComponent processingComponent = new ProcessingComponent();

        public bool isProcessing {
            get { return HasComponent(InputComponentIds.Processing); }
            set {
                if (value != isProcessing) {
                    if (value) {
                        AddComponent(InputComponentIds.Processing, processingComponent);
                    } else {
                        RemoveComponent(InputComponentIds.Processing);
                    }
                }
            }
        }

        public Entity IsProcessing(bool value) {
            isProcessing = value;
            return this;
        }
    }

    public partial class Pool {
        public Entity processingEntity { get { return GetGroup(InputMatcher.Processing).GetSingleEntity(); } }

        public bool isProcessing {
            get { return processingEntity != null; }
            set {
                var entity = processingEntity;
                if (value != (entity != null)) {
                    if (value) {
                        CreateEntity().isProcessing = true;
                    } else {
                        DestroyEntity(entity);
                    }
                }
            }
        }
    }
}

    public partial class InputMatcher {
        static IMatcher _matcherProcessing;

        public static IMatcher Processing {
            get {
                if (_matcherProcessing == null) {
                    var matcher = (Matcher)Matcher.AllOf(InputComponentIds.Processing);
                    matcher.componentNames = InputComponentIds.componentNames;
                    _matcherProcessing = matcher;
                }

                return _matcherProcessing;
            }
        }
    }
