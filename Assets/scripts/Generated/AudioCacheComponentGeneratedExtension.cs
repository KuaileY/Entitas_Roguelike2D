//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {
    public partial class Entity {
        public AudioCacheComponent audioCache { get { return (AudioCacheComponent)GetComponent(InputComponentIds.AudioCache); } }

        public bool hasAudioCache { get { return HasComponent(InputComponentIds.AudioCache); } }

        public Entity AddAudioCache(System.Collections.Generic.Dictionary<Res.audios, UnityEngine.AudioClip> newClips) {
            var component = CreateComponent<AudioCacheComponent>(InputComponentIds.AudioCache);
            component.clips = newClips;
            return AddComponent(InputComponentIds.AudioCache, component);
        }

        public Entity ReplaceAudioCache(System.Collections.Generic.Dictionary<Res.audios, UnityEngine.AudioClip> newClips) {
            var component = CreateComponent<AudioCacheComponent>(InputComponentIds.AudioCache);
            component.clips = newClips;
            ReplaceComponent(InputComponentIds.AudioCache, component);
            return this;
        }

        public Entity RemoveAudioCache() {
            return RemoveComponent(InputComponentIds.AudioCache);
        }
    }

    public partial class Pool {
        public Entity audioCacheEntity { get { return GetGroup(InputMatcher.AudioCache).GetSingleEntity(); } }

        public AudioCacheComponent audioCache { get { return audioCacheEntity.audioCache; } }

        public bool hasAudioCache { get { return audioCacheEntity != null; } }

        public Entity SetAudioCache(System.Collections.Generic.Dictionary<Res.audios, UnityEngine.AudioClip> newClips) {
            if (hasAudioCache) {
                throw new EntitasException("Could not set audioCache!\n" + this + " already has an entity with AudioCacheComponent!",
                    "You should check if the pool already has a audioCacheEntity before setting it or use pool.ReplaceAudioCache().");
            }
            var entity = CreateEntity();
            entity.AddAudioCache(newClips);
            return entity;
        }

        public Entity ReplaceAudioCache(System.Collections.Generic.Dictionary<Res.audios, UnityEngine.AudioClip> newClips) {
            var entity = audioCacheEntity;
            if (entity == null) {
                entity = SetAudioCache(newClips);
            } else {
                entity.ReplaceAudioCache(newClips);
            }

            return entity;
        }

        public void RemoveAudioCache() {
            DestroyEntity(audioCacheEntity);
        }
    }
}

    public partial class InputMatcher {
        static IMatcher _matcherAudioCache;

        public static IMatcher AudioCache {
            get {
                if (_matcherAudioCache == null) {
                    var matcher = (Matcher)Matcher.AllOf(InputComponentIds.AudioCache);
                    matcher.componentNames = InputComponentIds.componentNames;
                    _matcherAudioCache = matcher;
                }

                return _matcherAudioCache;
            }
        }
    }
