//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;

namespace Entitas {
    public partial class Entity {
        public FoodPointsComponent foodPoints { get { return (FoodPointsComponent)GetComponent(InputComponentIds.FoodPoints); } }

        public bool hasFoodPoints { get { return HasComponent(InputComponentIds.FoodPoints); } }

        public Entity AddFoodPoints(int newValue) {
            var component = CreateComponent<FoodPointsComponent>(InputComponentIds.FoodPoints);
            component.value = newValue;
            return AddComponent(InputComponentIds.FoodPoints, component);
        }

        public Entity ReplaceFoodPoints(int newValue) {
            var component = CreateComponent<FoodPointsComponent>(InputComponentIds.FoodPoints);
            component.value = newValue;
            ReplaceComponent(InputComponentIds.FoodPoints, component);
            return this;
        }

        public Entity RemoveFoodPoints() {
            return RemoveComponent(InputComponentIds.FoodPoints);
        }
    }

    public partial class Pool {
        public Entity foodPointsEntity { get { return GetGroup(InputMatcher.FoodPoints).GetSingleEntity(); } }

        public FoodPointsComponent foodPoints { get { return foodPointsEntity.foodPoints; } }

        public bool hasFoodPoints { get { return foodPointsEntity != null; } }

        public Entity SetFoodPoints(int newValue) {
            if (hasFoodPoints) {
                throw new EntitasException("Could not set foodPoints!\n" + this + " already has an entity with FoodPointsComponent!",
                    "You should check if the pool already has a foodPointsEntity before setting it or use pool.ReplaceFoodPoints().");
            }
            var entity = CreateEntity();
            entity.AddFoodPoints(newValue);
            return entity;
        }

        public Entity ReplaceFoodPoints(int newValue) {
            var entity = foodPointsEntity;
            if (entity == null) {
                entity = SetFoodPoints(newValue);
            } else {
                entity.ReplaceFoodPoints(newValue);
            }

            return entity;
        }

        public void RemoveFoodPoints() {
            DestroyEntity(foodPointsEntity);
        }
    }
}

    public partial class InputMatcher {
        static IMatcher _matcherFoodPoints;

        public static IMatcher FoodPoints {
            get {
                if (_matcherFoodPoints == null) {
                    var matcher = (Matcher)Matcher.AllOf(InputComponentIds.FoodPoints);
                    matcher.componentNames = InputComponentIds.componentNames;
                    _matcherFoodPoints = matcher;
                }

                return _matcherFoodPoints;
            }
        }
    }
